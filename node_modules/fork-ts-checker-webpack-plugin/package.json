{
  "_args": [
    [
      "fork-ts-checker-webpack-plugin@1.0.0-alpha.6",
      "/home/wishbook/react_js/route-app/node_modules/react-dev-utils"
    ]
  ],
  "_from": "fork-ts-checker-webpack-plugin@1.0.0-alpha.6",
  "_hasShrinkwrap": false,
  "_id": "fork-ts-checker-webpack-plugin@1.0.0-alpha.6",
  "_inCache": true,
  "_installable": true,
  "_location": "/fork-ts-checker-webpack-plugin",
  "_nodeVersion": "8.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fork-ts-checker-webpack-plugin_1.0.0-alpha.6_1548066111691_0.06026274123143782"
  },
  "_npmUser": {
    "email": "piotrek.oles@gmail.com",
    "name": "piotr-oles"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "arr-flatten": "1.1.0",
    "define-property": "2.0.2",
    "extend-shallow": "3.0.2",
    "fragment-cache": "0.2.1",
    "is-extendable": "0.1.1",
    "isobject": "3.0.1",
    "nanomatch": "1.2.13",
    "object.pick": "1.3.0",
    "posix-character-classes": "0.1.1",
    "regex-not": "1.0.2",
    "repeat-element": "1.1.3",
    "repeat-string": "1.6.1",
    "snapdragon": "0.8.2",
    "snapdragon-node": "2.1.1",
    "split-string": "3.1.0",
    "to-regex": "3.0.2",
    "to-regex-range": "2.1.1"
  },
  "_requested": {
    "name": "fork-ts-checker-webpack-plugin",
    "raw": "fork-ts-checker-webpack-plugin@1.0.0-alpha.6",
    "rawSpec": "1.0.0-alpha.6",
    "scope": null,
    "spec": "1.0.0-alpha.6",
    "type": "version"
  },
  "_requiredBy": [
    "/react-dev-utils"
  ],
  "_resolved": "https://registry.npmjs.org/fork-ts-checker-webpack-plugin/-/fork-ts-checker-webpack-plugin-1.0.0-alpha.6.tgz",
  "_shasum": "826c57048addf8a3253853615c84f3ff7beeaf45",
  "_shrinkwrap": null,
  "_spec": "fork-ts-checker-webpack-plugin@1.0.0-alpha.6",
  "_where": "/home/wishbook/react_js/route-app/node_modules/react-dev-utils",
  "author": {
    "email": "piotrek.oles@gmail.com",
    "name": "Piotr Oleś"
  },
  "bugs": {
    "url": "https://github.com/Realytics/fork-ts-checker-webpack-plugin/issues"
  },
  "contributors": [
    {
      "name": "Piotr Oleś",
      "email": "piotrek.oles@gmail.com",
      "url": "https://github.com/piotr-oles"
    },
    {
      "name": "John Reilly",
      "email": "johnny_reilly@hotmail.com",
      "url": "https://blog.johnnyreilly.com"
    }
  ],
  "dependencies": {
    "babel-code-frame": "^6.22.0",
    "chalk": "^2.4.1",
    "chokidar": "^2.0.4",
    "micromatch": "^3.1.10",
    "minimatch": "^3.0.4",
    "semver": "^5.6.0",
    "tapable": "^1.0.0"
  },
  "description": "Runs typescript type checker and linter on separate process.",
  "devDependencies": {
    "@types/babel-code-frame": "^6.20.1",
    "@types/chokidar": "^1.7.5",
    "@types/micromatch": "^3.1.0",
    "@types/minimatch": "^3.0.1",
    "@types/node": "^8.10.38",
    "@types/semver": "^5.5.0",
    "@types/webpack": "^4.4.19",
    "chai": "^4.2.0",
    "css-loader": "0.28.11",
    "eslint": "^5.7.0",
    "husky": "^1.1.4",
    "istanbul": "^0.4.5",
    "lint-staged": "^8.0.5",
    "mocha": "^5.2.0",
    "mock-fs": "^4.3.0",
    "mock-require": "^3.0.2",
    "prettier": "^1.14.3",
    "rimraf": "^2.5.4",
    "sinon": "^7.1.1",
    "ts-loader": "^5.0.0",
    "tslint": "^5.11.0",
    "tslint-config-prettier": "^1.16.0",
    "typescript": "^3.0.1",
    "unixify": "^1.0.0",
    "vue": "^2.5.16",
    "vue-class-component": "^6.1.1",
    "vue-loader": "^15.2.4",
    "vue-template-compiler": "^2.5.16",
    "webpack": "^5.0.0-alpha.5"
  },
  "directories": {},
  "dist": {
    "fileCount": 67,
    "integrity": "sha512-s/V+58nLrUjuXyzYk8AL11XG8bxIirTbafDLMn26sL59HQx8QvvsRTqOkhq4MV0coIkog1jZuH/E9Abm8zFZ2g==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcRZ1ACRA9TVsSAnZWagAAOfkP/14jIUXpLpXX7ia6aj3g\nMGQ3Lxzr0CPHl4bJDnBvTPV4bxKaFcoUwMw9g1e40OwgjzZgyVu9CydwNxz5\n3Nk8GWdeWKx0ZwcUjqGKECnx1+uqig7NJQb3LXfgNRNwElEnVqGxwNJMzEYi\nu43lpVUPGsDjm5KWGW5ngmN93BZNT7Re2FPdCRNH6FAtijQcE1Smm+4dUzJh\n39KcbNm5iyAbr+M56+UwjgX0fMY+pBaWK+qAIRg7qL3jFJUbsUkvlHnQ+GCP\nH3E3sl43kAHbF42YMDPtHRJKeR1mnnSuAGPfiGGS8Yl8k5/cCVGdmuozujPc\nWCvCNlzeKNNdU//FCZ5ev1JB53B4eYEuxKskn3upwgo0Zbt9L9dJorrUQ3Yn\nVvQgnsU2qPiHQ6REY23U24hYfjV0iGvV0QA28jVHRd1D9o+lcUa0F+9ZGMJG\n9CSpKTl0qqK94nIKnxtQToPnCelDVPYyEt6bm+KUaPa4UYAjfC1FTGxDNMbN\ngJkQEadU07vZmfeAEvRSEUsNTxfUIotmAQOKSDtrUgLKFxEiLcC0ozpVLyso\n11fgG1byhlg7rf7lO6Zh9geaj2+pSw+lJ0YURr7DtE82wr65If22VGb7h/XC\nTC7xu7SuNGWDylSyQ58/6x6ywsupudt0Bzep2NWkveMn49LMiWxkSz6p3Ny7\nBDKr\r\n=rIaM\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "826c57048addf8a3253853615c84f3ff7beeaf45",
    "tarball": "https://registry.npmjs.org/fork-ts-checker-webpack-plugin/-/fork-ts-checker-webpack-plugin-1.0.0-alpha.6.tgz",
    "unpackedSize": 200829
  },
  "engines": {
    "node": ">=6.11.5"
  },
  "gitHead": "f0457dd6394a14f8cd9a8b48a748a61e20982d70",
  "homepage": "https://github.com/Realytics/fork-ts-checker-webpack-plugin#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "awesome-typescript-loader",
    "checker",
    "fast",
    "fork",
    "increment",
    "linter",
    "plugin",
    "speed",
    "ts-loader",
    "type",
    "typescript",
    "webpack",
    "webpack-plugin"
  ],
  "license": "MIT",
  "lint-staged": {
    "concurrent": false,
    "linters": {
      "*.js": [
        "eslint --fix"
      ],
      "*.ts": [
        "tslint --fix"
      ],
      "*.{js,ts}": [
        "git add",
        "prettier --write"
      ]
    }
  },
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "etienne-dldc",
      "email": "e.deladonchamps@gmail.com"
    },
    {
      "name": "piotr-oles",
      "email": "piotrek.oles@gmail.com"
    },
    {
      "name": "realytics-tech",
      "email": "opensource@realytics.io"
    },
    {
      "name": "vincentnguyenhuu",
      "email": "vincent@realytics.io"
    }
  ],
  "name": "fork-ts-checker-webpack-plugin",
  "optionalDependencies": {},
  "readme": "# Fork TS Checker Webpack Plugin\n[![Npm version](https://img.shields.io/npm/v/fork-ts-checker-webpack-plugin.svg?style=flat-square)](https://www.npmjs.com/package/fork-ts-checker-webpack-plugin)\n[![Build Status](https://travis-ci.org/Realytics/fork-ts-checker-webpack-plugin.svg?branch=master)](https://travis-ci.org/Realytics/fork-ts-checker-webpack-plugin)\n\nWebpack plugin that runs typescript type checker on a separate process.\n \n## Installation\nThis plugin requires minimum **webpack 2.3**, **typescript 2.1** and optionally **tslint 4.0**\n```sh\nnpm install --save-dev fork-ts-checker-webpack-plugin\n```\nBasic webpack config (with [ts-loader](https://github.com/TypeStrong/ts-loader))\n```js\nvar ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\n\nvar webpackConfig = {\n  context: __dirname, // to automatically find tsconfig.json\n  entry: './src/index.ts',\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        loader: 'ts-loader',\n        options: {\n          // disable type checker - we will use it in fork plugin\n          transpileOnly: true \n        }\n      }\n    ]\n  },\n  plugins: [\n    new ForkTsCheckerWebpackPlugin()\n  ]\n};\n```\n\n## Motivation\nThere is already similar solution - [awesome-typescript-loader](https://github.com/s-panferov/awesome-typescript-loader). You can\nadd `CheckerPlugin` and delegate checker to the separate process. The problem with `awesome-typescript-loader` was that, in our case,\nit was a lot slower than [ts-loader](https://github.com/TypeStrong/ts-loader) on an incremental build (~20s vs ~3s).\nSecondly, we use [tslint](https://palantir.github.io/tslint) and we wanted to run this, along with type checker, in a separate process.\nThis is why we've created this plugin. To provide better performance, plugin reuses Abstract Syntax Trees between compilations and shares \nthese trees with tslint. It can be scaled with a multi-process mode to utilize maximum CPU power.\n\n## Modules resolution\nIt's very important to be aware that **this plugin uses [typescript](https://github.com/Microsoft/TypeScript)'s, not \n[webpack](https://github.com/webpack/webpack)'s modules resolution**. It means that you have to setup `tsconfig.json` correctly. For example \nif you set `files: ['./src/someFile.ts']` in `tsconfig.json`, this plugin will check only `someFile.ts` for semantic errors. It's because \nof performance. The goal of this plugin is to be *as fast as possible*. With typescript's module resolution we don't have to wait for webpack \nto compile files (which traverses dependency graph during compilation) - we have a full list of files from the begin.\n\nTo debug typescript's modules resolution, you can use `tsc --traceResolution` command.\n\n## TSLint\nIf you have installed [tslint](https://palantir.github.io/tslint), you can enable it by setting `tslint: true` or \n`tslint: './path/to/tslint.json'`. We recommend changing `defaultSeverity` to a `\"warning\"` in `tslint.json` file. \nIt helps to distinguish lints from typescript's diagnostics.\n\n## Options\n* **tsconfig** `string`:\nPath to *tsconfig.json* file. Default: `path.resolve(compiler.options.context, './tsconfig.json')`.\n\n* **compilerOptions** `object`:\nAllows overriding TypeScript options. Should be specified in the same format as you would do for the `compilerOptions` property in tsconfig.json. Default: `{}`.\n\n* **tslint** `string | true`: \nPath to *tslint.json* file or `true`. If `true`, uses `path.resolve(compiler.options.context, './tslint.json')`. Default: `undefined`.\n\n* **tslintAutoFix** `boolean `:\nPasses on `--fix` flag while running `tslint` to auto fix linting errors. Default: false.\n\n* **watch** `string | string[]`: \nDirectories or files to watch by service. Not necessary but improves performance (reduces number of `fs.stat` calls).\n\n* **async** `boolean`:\nTrue by default - `async: false` can block webpack's emit to wait for type checker/linter and to add errors to the webpack's compilation.\nWe recommend to set this to `false` in projects where type checking is faster than webpack's build - it's better for integration with other plugins. Another scenario where you might want to set this to `false` is if you use the `overlay` functionality of `webpack-dev-server`.\n\n* **ignoreDiagnostics** `number[]`:\nList of typescript diagnostic codes to ignore.\n\n* **ignoreLints** `string[]`: \nList of tslint rule names to ignore.\n\n* **reportFiles** `string[]`: \nOnly report errors on files matching these glob patterns. This can be useful when certain types definitions have errors that are not fatal to your application. Default: `[]`.\n\n```js\n  // in webpack.config.js\n  new ForkTsCheckerWebpackPlugin({ reportFiles: ['src/**/*.{ts,tsx}', '!src/skip.ts'] })\n```\n\n* **colors** `boolean`:\nIf `false`, disables built-in colors in logger messages. Default: `true`.\n\n* **logger** `object`:\nLogger instance. It should be object that implements method: `error`, `warn`, `info`. Default: `console`.\n\n* **formatter** `'default' | 'codeframe' | ((message: NormalizedMessage, useColors: boolean) => string)`:\nFormatter for diagnostics and lints. By default uses `default` formatter. You can also pass your own formatter as a function\n(see `src/NormalizedMessage.js` and `src/formatter/` for api reference).\n\n* **formatterOptions** `object`:\nOptions passed to formatters (currently only `codeframe` - see [available options](https://www.npmjs.com/package/babel-code-frame#options))\n\n* **silent** `boolean`:\nIf `true`, logger will not be used. Default: `false`.\n\n* **checkSyntacticErrors** `boolean`: \nThis option is useful if you're using ts-loader in `happyPackMode` with [HappyPack](https://github.com/amireh/happypack) or [thread-loader](https://github.com/webpack-contrib/thread-loader) to parallelise your builds.  If `true` it will ensure that the plugin checks for *both* syntactic errors (eg `const array = [{} {}];`) and semantic errors (eg `const x: number = '1';`).  By default the plugin only checks for semantic errors.  This is because when ts-loader is used in `transpileOnly` mode, ts-loader will still report syntactic errors. When used in `happyPackMode` it does not. Default: `false`.\n\n* **memoryLimit** `number`: \nMemory limit for service process in MB. If service exits with allocation failed error, increase this number. Default: `2048`.\n\n* **workers** `number`:\nYou can split type checking to a few workers to speed-up increment build. **Be careful** - if you don't want to increase build time, you \nshould keep free 1 core for *build* and 1 core for a *system* *(for example system with 4 CPUs should use max 2 workers)*. Second thing -\nnode doesn't share memory between workers - keep in mind that memory usage will increase. Be aware that in some scenarios increasing workers\nnumber **can increase checking time**. Default: `ForkTsCheckerWebpackPlugin.ONE_CPU`.\n\n* **vue** `boolean`:\nIf `true`, the linter and compiler will process VueJs single-file-component (.vue) files. See the \n[Vue section](https://github.com/Realytics/fork-ts-checker-webpack-plugin#vue) further down for information on how to correctly setup your project.\n\n* **useTypescriptIncrementalApi** `boolean`:\nIf true, the plugin will use incremental compilation API introduced in typescript 2.7. In this mode you can only have 1 \nworker, but if the changes in your code are small (like you normally have when you work in 'watch' mode), the compilation \nmay be much faster, even compared to multi-threaded compilation. \n\n* **measureCompilationTime** `boolean`:\nIf true, the plugin will measure the time spent inside the compilation code. This may be useful to compare modes,\nespecially if there are other loaders/plugins involved in the compilation. **requires node 8+**\n\n* **typescript** `string`:\nIf supplied this is a custom path where `typescript` can be found. Defaults to `require.resolve('typescript')`.\n\n### Pre-computed consts:      \n  * `ForkTsCheckerWebpackPlugin.ONE_CPU` - always use one CPU\n  * `ForkTsCheckerWebpackPlugin.ALL_CPUS` - always use all CPUs (will increase build time)\n  * `ForkTsCheckerWebpackPlugin.ONE_CPU_FREE` - leave only one CPU for build (probably will increase build time)\n  * `ForkTsCheckerWebpackPlugin.TWO_CPUS_FREE` - **recommended** - leave two CPUs free (one for build, one for system)\n\n## Different behaviour in watch mode\n\nIf you turn on [webpacks watch mode](https://webpack.js.org/configuration/watch/#watch) the `fork-ts-checker-notifier-webpack-plugin` will take care of logging type errors, _not_ webpack itself. That means if you set `silent: true` you won't see type errors in your console in watch mode.\n\nYou can either set `silent: false` to show the logging from `fork-ts-checker-notifier-webpack-plugin` _or_ set `async: false`. Now webpack itself will log type errors again, but note that this can slow down your builds depending on the size of your project.\n\n## Notifier\n\nYou may already be using the excellent [webpack-notifier](https://github.com/Turbo87/webpack-notifier) plugin to make build failures more obvious in the form of system notifications. There's an equivalent notifier plugin designed to work with the `fork-ts-checker-webpack-plugin`.  It is the `fork-ts-checker-notifier-webpack-plugin` and can be found [here](https://github.com/johnnyreilly/fork-ts-checker-notifier-webpack-plugin). This notifier deliberately has a similar API as the `webpack-notifier` plugin to make migration easier.\n\n## Known Issue Watching Non-Emitting Files\n\nAt present there is an issue with the plugin regarding the triggering of type-checking when a change is made in a source file that will not emit js. If you have a file which contains only `interface`s and / or `type`s then changes to it will **not** trigger the type checker whilst in watch mode. Sorry about that.\n\nWe hope this will be resolved in future; the issue can be tracked [here](https://github.com/Realytics/fork-ts-checker-webpack-plugin/issues/36).\n\n## Plugin Hooks\nThis plugin provides some custom webpack hooks (all are sync):\n\n| Event name | Description | Params |\n|------------|-------------|--------|\n|`fork-ts-checker-cancel`| Cancellation has been requested | `cancellationToken` |\n|`fork-ts-checker-waiting`| Waiting for results | `hasTsLint` |\n|`fork-ts-checker-service-before-start`| Async plugin that can be used for delaying `fork-ts-checker-service-start` | - |\n|`fork-ts-checker-service-start`| Service will be started | `tsconfigPath`, `tslintPath`, `watchPaths`, `workersNumber`, `memoryLimit` |\n|`fork-ts-checker-service-start-error` | Cannot start service | `error` |\n|`fork-ts-checker-service-out-of-memory`| Service is out of memory | - |\n|`fork-ts-checker-receive`| Plugin receives diagnostics and lints from service | `diagnostics`, `lints` | \n|`fork-ts-checker-emit`| Service will add errors and warnings to webpack compilation ('build' mode) | `diagnostics`, `lints`, `elapsed` |\n|`fork-ts-checker-done`| Service finished type checking and webpack finished compilation ('watch' mode) | `diagnostics`, `lints`, `elapsed` |\n\n## Vue\n1. Turn on the vue option in the plugin in your webpack config:\n\n```\n    new ForkTsCheckerWebpackPlugin({\n      tslint: true,\n      vue: true\n    })\n```\n\n2. To activate TypeScript in your `.vue` files, you need to ensure your script tag's language attribute is set\nto `ts` or `tsx` (also make sure you include the `.vue` extension in all your import statements as shown below): \n\n```html\n<script lang=\"ts\">\nimport Hello from '@/components/hello.vue'\n\n// ...\n\n</script>\n```\n\n3. Ideally you are also using `ts-loader` (in transpileOnly mode). Your Webpack config rules may look something like this:  \n\n```\n{\n  test: /\\.ts$/,\n  loader: 'ts-loader',\n  include: [resolve('src'), resolve('test')],\n  options: {\n    appendTsSuffixTo: [/\\.vue$/],\n    transpileOnly: true\n  }\n},\n{\n  test: /\\.vue$/,\n  loader: 'vue-loader',\n  options: vueLoaderConfig\n},\n```\n4. Add rules to your `tslint.json` and they will be applied to Vue files. For example, you could apply the Standard JS rules [tslint-config-standard](https://github.com/blakeembrey/tslint-config-standard) like this:  \n\n```json\n{\n    \"defaultSeverity\": \"error\",\n    \"extends\": [\n      \"tslint-config-standard\"\n    ]\n}\n```\n5. Ensure your `tsconfig.json` includes .vue files:  \n\n```\n// tsconfig.json\n{\n  \"include\": [\n    \"src/**/*.ts\",\n    \"src/**/*.vue\"\n  ],\n  \"exclude\": [\n      \"node_modules\"\n  ]\n}\n```\n\n6. It accepts any wildcard in your TypeScript configuration:  \n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \n    // ...\n\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"src/*\"\n      ],\n      \"~/*\": [\n        \"src/*\"\n      ]\n    }\n  }\n}\n\n// In a .ts or .vue file...\nimport Hello from '@/components/hello.vue'\n```\n\n7. If you are working in **VSCode**, you can get extensions [Vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur) and [TSLint Vue](https://marketplace.visualstudio.com/items?itemName=prograhammer.tslint-vue) to complete the developer workflow.\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Realytics/fork-ts-checker-webpack-plugin.git"
  },
  "scripts": {
    "build": "tsc --version && tsc --project \"./src\"",
    "lint": "tslint --project src/tsconfig.json && eslint ./test",
    "lint:fix": "tslint --project src/tsconfig.json --fix && eslint ./test --fix",
    "test": "npm run build && npm run test:unit && npm run test:integration",
    "test:coverage": "rimraf coverage && istanbul cover -root lib --include-all-sources mocha -- -R spec ./test/unit ./test/integration",
    "test:integration": "mocha -R spec ./test/integration --exit && rimraf tmp",
    "test:unit": "mocha -R spec ./test/unit --exit",
    "test:watch": "mocha -R spec --watch ./test/unit",
    "watch": "tsc --version && tsc --project \"./src\" --watch"
  },
  "types": "lib/index.d.ts",
  "version": "1.0.0-alpha.6"
}
