{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dhiren\\\\My projects\\\\React_js_projects\\\\ReactApp\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'; //like HoC provide the application with store by wrapping around App a glue between react app & reuxx store\n\nimport rootReducer from \"./reducers/rootReducer\"; //only this reducer interacts with store\n\n/*import thunk from 'redux-thunk';\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nRedux Thunk is a middleware that lets you call action creators that return a function instead of an \r\naction object. That function receives the store’s dispatch method, which is then used to 'dispatch' regular \r\nsynchronous actions inside the body of the function once the asynchronous operations have completed.\r\n\r\nThe most common use-case for Redux Thunk is for communicating asynchronously with an external API to retrieve or \r\nsave data. Redux Thunk makes it easy to dispatch actions that follow the lifecycle of a request to an external API.\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar store = createStore(rootReducer);\nReactDOM.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 42\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 27,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nserviceWorker.unregister();","map":{"version":3,"sources":["D:/Dhiren/My projects/React_js_projects/ReactApp/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","Provider","rootReducer","store","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,iBAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAAQC,QAAR,QAAuB,aAAvB,C,CACA;;AAEA,OAAOC,WAAP,MAAwB,wBAAxB,C,CACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAMC,KAAK,GAAGH,WAAW,CAACE,WAAD,CAAzB;AAEAL,QAAQ,CAACO,MAAT,eAAgB,QAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA,yBAAyB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA8DE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA9D;AAGAP,aAAa,CAACQ,UAAd","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore } from 'redux';\r\nimport {Provider} from 'react-redux'\r\n//like HoC provide the application with store by wrapping around App a glue between react app & reuxx store\r\n\r\nimport rootReducer from \"./reducers/rootReducer\"; \r\n//only this reducer interacts with store\r\n\r\n/*import thunk from 'redux-thunk';\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nRedux Thunk is a middleware that lets you call action creators that return a function instead of an \r\naction object. That function receives the store’s dispatch method, which is then used to 'dispatch' regular \r\nsynchronous actions inside the body of the function once the asynchronous operations have completed.\r\n\r\nThe most common use-case for Redux Thunk is for communicating asynchronously with an external API to retrieve or \r\nsave data. Redux Thunk makes it easy to dispatch actions that follow the lifecycle of a request to an external API.\r\n*/\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(<Provider store={store} ><App /></Provider> , document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"]},"metadata":{},"sourceType":"module"}