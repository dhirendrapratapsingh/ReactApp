{"ast":null,"code":"import { getBatch } from './batch'; // encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\nvar CLEARED = null;\nvar nullListeners = {\n  notify: function notify() {}\n};\n\nfunction createListenerCollection() {\n  var batch = getBatch(); // the current/next pattern is copied from redux's createStore code.\n  // TODO: refactor+expose that code to be reusable here?\n\n  var current = [];\n  var next = [];\n  return {\n    clear: function clear() {\n      next = CLEARED;\n      current = CLEARED;\n    },\n    notify: function notify() {\n      var listeners = current = next;\n      batch(function () {\n        for (var i = 0; i < listeners.length; i++) {\n          listeners[i]();\n        }\n      });\n    },\n    get: function get() {\n      return next;\n    },\n    subscribe: function subscribe(listener) {\n      var isSubscribed = true;\n      if (next === current) next = current.slice();\n      next.push(listener);\n      return function unsubscribe() {\n        if (!isSubscribed || current === CLEARED) return;\n        isSubscribed = false;\n        if (next === current) next = current.slice();\n        next.splice(next.indexOf(listener), 1);\n      };\n    }\n  };\n}\n\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription(store, parentSub) {\n    this.store = store;\n    this.parentSub = parentSub;\n    this.unsubscribe = null;\n    this.listeners = nullListeners;\n    this.handleChangeWrapper = this.handleChangeWrapper.bind(this);\n  }\n\n  var _proto = Subscription.prototype;\n\n  _proto.addNestedSub = function addNestedSub(listener) {\n    this.trySubscribe();\n    return this.listeners.subscribe(listener);\n  };\n\n  _proto.notifyNestedSubs = function notifyNestedSubs() {\n    this.listeners.notify();\n  };\n\n  _proto.handleChangeWrapper = function handleChangeWrapper() {\n    if (this.onStateChange) {\n      this.onStateChange();\n    }\n  };\n\n  _proto.isSubscribed = function isSubscribed() {\n    return Boolean(this.unsubscribe);\n  };\n\n  _proto.trySubscribe = function trySubscribe() {\n    if (!this.unsubscribe) {\n      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);\n      this.listeners = createListenerCollection();\n    }\n  };\n\n  _proto.tryUnsubscribe = function tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null;\n      this.listeners.clear();\n      this.listeners = nullListeners;\n    }\n  };\n\n  return Subscription;\n}();\n\nexport { Subscription as default };","map":{"version":3,"sources":["D:/Dhiren/My projects/React_js_projects/ReactApp/node_modules/react-redux/es/utils/Subscription.js"],"names":["getBatch","CLEARED","nullListeners","notify","createListenerCollection","batch","current","next","clear","listeners","i","length","get","subscribe","listener","isSubscribed","slice","push","unsubscribe","splice","indexOf","Subscription","store","parentSub","handleChangeWrapper","bind","_proto","prototype","addNestedSub","trySubscribe","notifyNestedSubs","onStateChange","Boolean","tryUnsubscribe","default"],"mappings":"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","sourcesContent":["import { getBatch } from './batch'; // encapsulates the subscription logic for connecting a component to the redux store, as\r\n// well as nesting subscriptions of descendant components, so that we can ensure the\r\n// ancestor components re-render before descendants\r\n\r\nvar CLEARED = null;\r\nvar nullListeners = {\r\n  notify: function notify() {}\r\n};\r\n\r\nfunction createListenerCollection() {\r\n  var batch = getBatch(); // the current/next pattern is copied from redux's createStore code.\r\n  // TODO: refactor+expose that code to be reusable here?\r\n\r\n  var current = [];\r\n  var next = [];\r\n  return {\r\n    clear: function clear() {\r\n      next = CLEARED;\r\n      current = CLEARED;\r\n    },\r\n    notify: function notify() {\r\n      var listeners = current = next;\r\n      batch(function () {\r\n        for (var i = 0; i < listeners.length; i++) {\r\n          listeners[i]();\r\n        }\r\n      });\r\n    },\r\n    get: function get() {\r\n      return next;\r\n    },\r\n    subscribe: function subscribe(listener) {\r\n      var isSubscribed = true;\r\n      if (next === current) next = current.slice();\r\n      next.push(listener);\r\n      return function unsubscribe() {\r\n        if (!isSubscribed || current === CLEARED) return;\r\n        isSubscribed = false;\r\n        if (next === current) next = current.slice();\r\n        next.splice(next.indexOf(listener), 1);\r\n      };\r\n    }\r\n  };\r\n}\r\n\r\nvar Subscription =\r\n/*#__PURE__*/\r\nfunction () {\r\n  function Subscription(store, parentSub) {\r\n    this.store = store;\r\n    this.parentSub = parentSub;\r\n    this.unsubscribe = null;\r\n    this.listeners = nullListeners;\r\n    this.handleChangeWrapper = this.handleChangeWrapper.bind(this);\r\n  }\r\n\r\n  var _proto = Subscription.prototype;\r\n\r\n  _proto.addNestedSub = function addNestedSub(listener) {\r\n    this.trySubscribe();\r\n    return this.listeners.subscribe(listener);\r\n  };\r\n\r\n  _proto.notifyNestedSubs = function notifyNestedSubs() {\r\n    this.listeners.notify();\r\n  };\r\n\r\n  _proto.handleChangeWrapper = function handleChangeWrapper() {\r\n    if (this.onStateChange) {\r\n      this.onStateChange();\r\n    }\r\n  };\r\n\r\n  _proto.isSubscribed = function isSubscribed() {\r\n    return Boolean(this.unsubscribe);\r\n  };\r\n\r\n  _proto.trySubscribe = function trySubscribe() {\r\n    if (!this.unsubscribe) {\r\n      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);\r\n      this.listeners = createListenerCollection();\r\n    }\r\n  };\r\n\r\n  _proto.tryUnsubscribe = function tryUnsubscribe() {\r\n    if (this.unsubscribe) {\r\n      this.unsubscribe();\r\n      this.unsubscribe = null;\r\n      this.listeners.clear();\r\n      this.listeners = nullListeners;\r\n    }\r\n  };\r\n\r\n  return Subscription;\r\n}();\r\n\r\nexport { Subscription as default };"]},"metadata":{},"sourceType":"module"}